% ---------------------------------------------------------------------------

\section{Approximation Errors in Numeric Inversion}
\label{sec:numeric-inversion}

Random variate generators that are based on inverting the distribution
function preserve the structure of the underlying uniform random
number generator. Given the fact that state-of-the-art uniform random
number generators are well tested, it is sufficient to estimate
(maximal) approximation errors.

As for the histogram based methods computing, plotting and analyzing
of such errors can be quite time consuming. So the numeric error
of an approximate inverse distribution function $G^{-1}(u)$ is often a
very volatile function of $u$ and requires the computation at a lot of
points. For plotting we can condense the information by partitioning
$(0,1)$ into intervals of equal length. In each of these the error is
computed at equidistributed points and minimum, maximum, median and
quartiles are estimated and stored. 
Thus we save memory and it is much faster to plot and compare errors
for different methods or distributions.

We have implemented a two step procedure:
\begin{enumerate}
\item
  Create a table of quantiles of the error in each of the intervals.
\item 
  Visualize errors.
\end{enumerate}
Thus we again can compare error of different approximation methods.

% ...........................................................................

\subsection{Measures for Approximation Errors}

Let $F$ and $F^{-1}$ denote cumulative distribution function (CDF) and
inverse distribution function (quantile function).
Let $G^{-1}$ be an approximation for $F^{-1}$.

Then the following measures may be used for describing approximation erros.
\begin{description}
  \item[$u$-error:] \mbox{}\hskip 1em \textbf{[ recommended ]} \\
    $\epsilon_u(u) = |u - F(G^{-1}(u))|$
  \item[absolute $x$-error:] \mbox{}\\
    $\epsilon_x(u) = |F^{-1}(u) - G^{-1}(u)|$
  \item[relative $x$-error:] \mbox{}\\
    $\displaystyle\tilde{\epsilon}_x(u) = \frac{|F^{-1}(u) - G^{-1}(u)|}{|F^{-1}(u)|}$
\end{description}

We have implemented als three errors but we convinced that it is the
$u$-error that is best suited in the framework of Monte Carlo
simulation (MC) and quasi-Monte Carlo methods (QMC).

It has some properties that make it a convenient and practical relevant 
measure of error for numerical inversion:

\begin{itemize}
\item 
  Uniform pseudo-random number generators work with integer arithmetic
  and return points on a grid. Thus these pseudo-random points 
  have a limited resolution, typically 
  $2^{-32}\approx 2.3\times 10^{-10}$ or (less frequently) machine
  precision $2^{-52}\approx 2.2\times 10^{-16}$.
  Consequently, the positions of pseudo-random numbers $U$ are not
  random at all at a scale that is not much larger than their resolution.
  $u$-errors can be seen as minor deviations of the underlying uniform
  pseudo-random points $U_i$ from their ``correct'' positions.
  We consider this deviation as negligible if it is (much) smaller
  than the resolution of the pseudo-random variate generator.

\item 
  The same holds for QMC experiments where the $F$-discrepancy
  \cite{Fang;Wang:1994a,Tuffin:1997a} of a point set $\{X_i\}$ is
  computed as discrepancy of the set $\{F(X_i)\}$. If the $X_i$ are
  generated by exact inversion their $F$-discrepancy coincides with
  the discrepancy of the underlying low-discrepancy set.
  Thus $\varepsilon_u(u)$ can be used to estimate the maximal change
  of the $F$-discrepancy compared to the ``exact'' points.

\item 
  Consider a sequence of approximations $F_n^{-1}$ to the inverse CDF
  $F^{-1}$ such that $\varepsilon_{u,n}(u) < \frac{1}{n}$ and let $F_n$ be
  the corresponding CDF.
  Then 
  $|F(x)-F_n(x)| = |F(F^{-1}_n(u)) - F_n(F^{-1}_n(u))| =
  |F(F^{-1}_n(u)) - u| = \varepsilon_{u,n}(u) \to 0$ for $n\to\infty$.
  That is, the CDFs $F_n$ converge weakly to the CDF $F$ of the target
  distribution and the corresponding random variates  $X_n=F^{-1}_n(U)$
  converge in distribution to the target distribution
  \cite{Billingsley:1986a}.

\item 
  $\varepsilon_u(u)$ can easily be computed provided that we can
  compute $F$ sufficiently accurately.
\end{itemize}

We are therefore convinced that the $u$-error is a natural
concept for the approximation error of numerical inversion.

% ...........................................................................

\subsection{\textbf{u}-Error}

Here is a simple example.
It shows median, interquartile range and range (minimum and maximum)
of the $u$-error in 100 equidistributed intervals in $u$-scale,
see Fig.~\ref{fig:uerror-1}.
Of course it its possible to increase the number of these intervals by
setting argument \code{res} to, e.g., \code{1000},
see Fig.~\ref{fig:uerror-2}.
<<eval=FALSE>>=
##   u-error
## .......................................................................
#
## Approximate inverse CDF of normal distribution using splines.
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
#
## Create a table of u-errors for the approximation errors.
## Use a sample of size of 10^5 random variates and 
## a resolution of only 100 points.
ue <- uerror(n=1e5, res=100, aqdist=aqn, pdist=pnorm)
#
## Plot u-errors.
plot(ue)
@ 

\begin{figure}
  \centering
<<uerror-1,fig=TRUE,height=4,echo=FALSE>>=
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
ue <- uerror(n=1e5, res=100, aqdist=aqn, pdist=pnorm)
plot(ue)
@ 
  \caption{$u$-error of an approximate inverse CDF (using splines) for
    the normal distribution; resolution = 100.}
    \label{fig:uerror-1}
\end{figure}

\begin{figure}
  \centering
<<uerror-2,fig=TRUE,height=4,echo=FALSE>>=
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
ue <- uerror(n=1e5, res=1000, aqdist=aqn, pdist=pnorm)
plot(ue)
@ 
  \caption{$u$-error of an approximate inverse CDF (using splines) for
    the normal distribution; resolution = 1000.}
    \label{fig:uerror-2}
\end{figure}

\clearpage
On the other hand it is also possible to zoom into a particular
subdomain of the inverse CDF using argument \code{udomain} (see
Fig.~\ref{fig:uerror-3}):

<<eval=FALSE>>=
##   u-error
## .......................................................................
#
## Approximate inverse CDF of normal distribution using splines.
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
#
## Create a table of u-errors for the approximation errors 
## for the subdomain (0.6, 0.65).
## Use a sample of size of 10^5 random variates.
ue <- uerror(n=1e5, aqdist=aqn, pdist=pnorm, udomain=c(0.6,0.65))
plot(ue)
@ 

\begin{figure}[h]
  \centering
<<uerror-3,fig=TRUE,height=4,echo=FALSE>>=
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
ue <- uerror(n=1e5, aqdist=aqn, pdist=pnorm, udomain=c(0.6,0.65), plot=TRUE)
@ 
  \caption{$u$-error of an approximate inverse CDF (using splines) for
    the normal distribution on interval $(0.6, 0.65)$; resolution = 1000.}
    \label{fig:uerror-3}
\end{figure}

\clearpage
It is also possible to show the $u$-errors of more than one
approximation in one plot (see Fig.~\ref{fig:uerror-4}).
The argument \code{tol} inserts the dashed line in the plot and can be
used to indicate the maximal tolerated error.
<<eval=FALSE>>=
##   u-error
## .............................................................
#
## Approximate inverse CDF of normal and gamma distribution using splines.
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
aqg <- splinefun(x=pgamma((0:500)*0.1,shape=5),
                 y=(0:500)*0.1, method="monoH.FC")
#
## Compute u-errors for these approximations
uen <- uerror(n=1e5, aqdist=aqn, pdist=pnorm)
ueg <- uerror(n=1e5, aqdist=aqg, pdist=pgamma, shape=5)
#
## Plot u-errors
plot.rvgt.ierror(list(uen,ueg), tol=1.e-6)
@ 

\begin{figure}[h]
   \centering
<<uerror-4,fig=TRUE,height=4,echo=FALSE>>=
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
uen <- uerror(n=1e5, aqdist=aqn, pdist=pnorm)
aqg <- splinefun(x=pgamma((0:500)*0.1,shape=5),
                 y=(0:500)*0.1, method="monoH.FC")
ueg <- uerror(n=1e5, aqdist=aqg, pdist=pgamma, shape=5)
plot.rvgt.ierror(list(uen,ueg), tol=1.e-6)
@ 
  \caption{$u$-error of an approximate inverse CDF (using splines) for
    the normal [1,red] and gamma distribution [2,cyan]; resolution = 1000.}
  \label{fig:uerror-4}
\end{figure}

% ...........................................................................

\clearpage
\subsection{\textbf{x}-Error}

We are convinced that $x$-errors (absolute and relative) are not the
measure of choice for approximation errors of for numerical inverse in
the framework of MC and QMC methods.
Nevertheless, there are two examples how these errors can be computed.

<<eval=FALSE>>=
##   Absolute x-error
## .............................................................
#
## Approximate inverse CDF of normal distribution using splines.
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
#
## Create a table of absolute x-errors.
xea <- xerror(n=1e5, aqdist=aqn, qdist=qnorm, kind="abs")
#
## Plot x-errors
plot(xea)
@ 

\begin{figure}[h]
   \centering
<<xerror-abs,fig=TRUE,height=4,echo=FALSE>>=
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05, method="monoH.FC")
xea <- xerror(n=1e5, aqdist=aqn, qdist=qnorm, kind="abs")
plot(xea)
@ 
  \caption{Absolute $x$-error of an approximate inverse CDF (using splines) for
    the normal distribution; resolution = 1000.}
  \label{fig:xerror-abs}
\end{figure}

\clearpage
<<eval=FALSE>>=
##   Relative x-error
## .......................................................................
#
## Approximate inverse CDF of normal distribution using splines.
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05,
                 method="monoH.FC")
#
## Create a table of relative x-errors.
xer <- xerror(n=1e5, aqdist=aqn, qdist=qnorm, kind="rel")
#
## Plot x-errors
plot(xer)
@ 

\begin{figure}[h]
   \centering
<<xerror-rel,fig=TRUE,height=4,echo=FALSE>>=
aqn <- splinefun(x=pnorm((-100:100)*0.05), y=(-100:100)*0.05, method="monoH.FC")
xer <- xerror(n=1e5, aqdist=aqn, qdist=qnorm, kind="rel")
plot(xer)
@ 
  \caption{Relative $x$-error of an approximate inverse CDF (using splines) for
    the normal distribution; resolution = 1000.}
  \label{fig:xerror-rel}
\end{figure}

% ---------------------------------------------------------------------------
