% ---------------------------------------------------------------------------

\section{Introduction}
\label{sec:introduction}

Non-uniform random variate generation is a small field of research
between mathematics, statistics and computer science. It plays a very
crucial role in every stochastic simulation. A lot of research has
been done to evolve more efficient and robust algorithms to generate
non-uniform random variates. These algorithms usually transform a 
sequence of independent uniformly distributed random numbers on
$(0,1)$ into a sequence of independent random variates of the desired
distribution. 

The theory of non-uniform random variate generation is based on the
assumption that a source of uniformly distributed random numbers is
available that produces real and truely random numbers. In practice,
however, we have to use pseudo-random numbers which are generated by
means of floaing point numbers. Thus there are deviations from the
theoretical framework which may or may not have influence on the
result of a Monte Carlo simulation.

In addition algorithm have to developed and implemented. As human can
err, coding errors or improper design of algorithms may cause defects
in a generated random sample. 
It is of paramount importance to detect such errors using
statistical tools and categorize which tests are sensitive to which
errors. 

% ...........................................................................

\subsection{Possible Kind of Errors}

There are various reasons why a particular random variate generator
in ones computing environment may produce a defective random sample.
There are three mean reasons for such defects:
\begin{enumerate}[(1)]
\item
  Implementation errors -- Mistakes in computer programs.
\item 
  Errors in the design of algorithms -- The proof for theorem
  that claims the correctness of the algorithm is wrong.
\item 
  Limitations of floating point arithmetic and round-off
  errors in implementations of these algorithms in real world
  computers.
\end{enumerate}

Error of type 1 is of course common to any computer program.
An example for an error of type 2 is the \emph{Kinderman-Ramage}
generator \citep{Kinderman;Ramage:1976a} for the standard normal
distribution. Although it has been used in several programs for
statistical computing for many years there has been an small error
deviation caused by missing line in the statement of the algorithm,
see \citep{Tirler;etal:2004a} for details.

Errors of type 3 can arise in distributions with extreme properties. 
E.g., it is no problem to generate a sample of beta distributed random
variates with shape parameters 3 and 0.05 using 
\code{rbeta(n=1, shape1=3, shape2=0.05)}.
However, the following piece of code should plot the histogram of a
uniformly distributed random variate:
<<eval=FALSE>>=
X <- rbeta(10000, shape1=3, shape2=0.05)
U <- pbeta(X, shape1=3, shape2=0.05)
hist(U)
@
\begin{figure}
  \centering
<<hist-beta-1,fig=TRUE,height=4,echo=FALSE>>=
X <- rbeta(10000, shape1=3, shape2=0.05)
U <- pbeta(X, shape1=3, shape2=0.05)
hist(U)
@ 
  \caption{Histogram of a sample of beta distributed random variates
    with shape parameters 3 and 0.05}
  \label{fig:hist-beta-1}
\end{figure}

However, this is not the case as Fig.~\ref{fig:hist-beta-1} shows. It
is obvious that a goodness-of-fit must fail.
The reason for this numeric result is given by the limitations of
floating point arithmetic. Thus the beta distribution degenerates into
a discrete distribution near one as can be seen by following example.
There are not floating point numbers between $1-2^{-53}$ and $1$.
<<>>=
x <- c(1-2^(-52), 1-2^(-53), 1-2^(-54), 1-2^(-54))
pbeta(x, shape1=3, shape2=0.05)
1-x
@ 

Although this is an extreme example (and one can thick of even
worse) this error is of the ``nice'' type. The limitations of floating
point arithmetic should be well-known to everybody who is working with
numeric methods\footnote{\citet{Overton:2001a} gives a good
  introduction into the IEEE floating point arithmetic that is
  implemented in all modern computers.}.
It cannot be avoided\footnote{There exist libraries that implement
  multiple precison arithmetic. However, they only shift the boundary
  when computation became inexact. They do not solve the problem.}
but these limitations can taken into consideration when a particular
representation of model is created.

% ...........................................................................

\subsection{Detecting Errors}

Other errors can be quite nasty as they are hard to detect.
Since we are dealing with ``random'' numbers there is not a unique
exact solution. It is more the opposite. There will be deviation
from the exact distribution. Even further, there must be deviation
from the perfect distribution. Nobody would trust a dice when
60 throws would give exactly 10 times each face.
So we need statistical method to detect deviation of the empirical
distribution from the theorectical distribution that are too large,
that is, that cannot just happen by chance.
The smaller the deviations are the larger the sample size must be.
For example, to detect the error in the Kinderman-Ramage generator it
requires a sample of size $10^7$ which was much too large when the
generator was developed, see \citep{Tirler;etal:2004a}.
Nowadays one can create and test such a sample whithin a few seconds.
This shows that the term ``exact generator'' is also heavily linked to
the available computing evironment and changes with the evolution of
computer hardware.

It is the purpose of package \rvgtest\ to provide tools to find
possible errors in RVGs. However, observing a defect in (the
implementation of) a pseudo-random variate generator by purely
statistical tools may require a large sample size which that exceeds
the memory when hold in a single array in \R. 
(Nevertheless, there is some chance that this defect causes an error
in a particular simulation with a moderate sample size.)
Hence we have implemented routines that can run tests on very large
sample sizes (which are only limited by the available runtimes).

Currently there are two toolsets for testing random variate generators
for \emph{continuous univariate distributions}:
\begin{itemize}
\item
  Tests based on histograms for all kinds of RVGs.
\item 
  Estimating errors of RVGs that are based on numerical
  inversion.
\end{itemize}

% ...........................................................................

\subsection{Non-uniform Random variate generation}

The interested reader may find much more information on non-uniform
random variate generation by the books of \citet{Devroye:1986a} and
\citet{Hoermann;Leydold;Derflinger:2004a}.


% ---------------------------------------------------------------------------

