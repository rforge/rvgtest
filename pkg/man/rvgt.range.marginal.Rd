\name{rvgt.range.marginal}
\alias{rvgt.range.marginal}
\title{Estimate marginal generation times of random variate generator}
\usage{
  rvgt.range.marginal(rdist, dist.params,
    r.params = list(), el.time = NA, duration = 0.1,
    gen.time = duration, repetitions = 1L, ncores = NULL,
    timeout = Inf, verbose = FALSE)
}
\arguments{
  \item{el.time}{running time for an accept-reject loop of
  a generator based on the rejection method.}

  \item{repetitions}{number of repetitions of the test
  (positive integer).  The marginal generation time is
  estimated by the median of all test results.}

  \item{rdist}{random number generator for distribution
  (function).}

  \item{dist.params}{parameters for distribution (non-empty
  list).}

  \item{r.params}{additional arguments for \code{rdist}
  (list).}

  \item{duration}{scheduled duration for a single test in
  seconds (numeric).}

  \item{gen.time}{(approximate) marginal generation time
  for \code{rdist}.  It must be either a single positive
  number (numeric) or an object of class
  \code{"rvgt.range.time"} that holds the result of a
  previous call to routine
  \code{\link{rvgt.range.marginal}}.}

  \item{ncores}{enable multicore support for performing
  tests in parallel and for setting timeout.  The following
  values are possible: \itemize{ \item \code{NULL}: the
  tests run sequentially on a single core.  \item A
  positive integer: the tests run on \code{ncores} cores in
  parallel.  Notice that \code{ncores=1L} is possible.
  Although then only one core is used the behavior is
  different from \code{ncores=NULL}.  \item \code{0L}: the
  number of available cores is autodetected by means of
  \code{\link[parallel]{detectCores}}.  } Multicore support
  is only available on POSIX-compliant OSes (basically
  every but Windows OSes).}

  \item{timeout}{set a timeout in seconds for each test
  (numeric).  This allows to protect against unexpected
  long running times or infinite loops.  It requires
  multicore support which is enabled by setting argument
  \code{ncores}.  (When a timeout is set then \code{ncores}
  is automatically set to \code{1L} if it is not already
  set by the user.)}

  \item{verbose}{if TRUE show progress.  Ignored when
  multicore support is enabled and 'ncores' > 1 (logical).}
}
\value{
  The function returns an object of class
  \code{"rvgt.range.time.marginal"} where the observed
  marginal generation times are stored in field
  \code{$data}, see \code{\link{rvgt.range.engine}} for a
  description of such objects. The routine returns
  \code{NA} in all cases where the setup fails, and
  \code{Inf} when a timeout has been reached.
}
\description{
  Estimate marginal generation times for the given random
  variate generator for a range of parameters.
}
\details{
  Routine \code{rvgt.range.marginal} estimates marginal
  generation times of random variate generator \code{rdist}
  for a range of parameters. For this purpose the total
  generation time of a larger sample is estimated using the
  running time that is returned by
  \code{\link{system.time}}.

  The scheduled sampling time for a particular combination
  of parameters is given by parameter \code{duration}.
  Notice that it must not be too small compared to the
  resolution of the system clock.

  The required sample size is estimated using the given
  \code{duration} and a (approximate) estimate of the
  marginal generation time. As the latter is not known at
  the first call to this routine we have a chicken-and-egg
  situation. Thus one has to provide an (at least rough)
  estimate for the marginal generation time via argument
  \code{gen.time}. This is either a single numeric value or
  the result of a pilot run of routine
  \code{rvgt.range.marginal}. If no such value is given
  then the \code{duration} (which results in a sample of
  size 1) is used as a first guess. This information is
  then used to estimate the marginal running time in a
  sequence of tries where the sample size is
  \emph{increasing} after each run when the total running
  time for the sample is too small. (So the first guess of
  the marginal generation time should be rather too large
  than too small.) This iterative process is stopped if the
  total running time is close to \code{duration}.

  \emph{Notice:} if \code{gen.time} contains the result of
  a pilot run, then tests for parameter values where the
  result was \code{NA} (i.e., the setup failed) or
  \code{Inf} (timeout was reached) are not performed any
  more and the old results are just copied.

  An alternative approach works for random number
  generators that are based on the rejection method. Then
  it is assumed that the running time for a single
  acceptance-rejection loop does not depend on the
  parameters of the distribution and is provide by argument
  \code{el.time}. Moreover, random variate generator
  \code{rdist} has to return a sample with attribute
  \code{"trc"} (theoretical rejection constant) when
  argument \code{show.properties=TRUE}. Then the expected
  running time is approximated by the product of these two
  values.

  Notice that \code{el.time} is always used (instead of
  \code{gen.time}) if it given.

  Timings can vary considerably. In order to get a more
  robust estimate one can repeat this test several times
  and use the median of all timings. This can be achieved
  by means of argument \code{repetitions}.

  A big issue of tests on a large range of parameter
  settings is that the running times may not be known in
  advance. Thus the total running time of the test suite
  may be extremely long due to some unexpected long runs
  for some tests. In order to avoid such problems the
  running times for each test can be limited by means of
  argument \code{timeout} which required to enable
  multicore support using \code{ncores}.
}
\note{
  It is assumed that the setup time is negligible compared
  the total sampling time.
}
\examples{
## Estimate marginal generation time for beta distribution
mgt <- rvgt.range.marginal(rdist = rbeta,
                           dist.params = list(
                             shape1=c(0.1,1,10),
                             shape2=c(0.1,1,10)),
                           duration = 0.01, gen.time = 1e-5)

## print summary of generation times
print(mgt)

## plot generation times (using logarithmic scales for parameters)
plot(mgt, xscale="log", yscale="log", main="rbeta")
}
\author{
  Josef Leydold \email{josef.leydold@wu.ac.at}
}
\seealso{
  \code{\link{rvgt.range.engine}} for a description of
  objects of class \code{"rvgt.range"}.
  \code{\link{print.rvgt.range}} for printing a summary of
  test results, \code{\link{plot.rvgt.range}} for plotting
  the test results.
}

